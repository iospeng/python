{
  "uid" : "dd73204f8b311474",
  "name" : "test_file_replace",
  "fullName" : "test_register_from.TestRegisterFrom#test_file_replace",
  "historyId" : "7709ace15a01b9dfc604a1efe1b37bb8",
  "time" : {
    "start" : 1635319123353,
    "stop" : 1635319138357,
    "duration" : 15004
  },
  "description" : "上传附件",
  "descriptionHtml" : "<p>上传附件</p>\n",
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"btn btn-info\">...</button> is not clickable at point (920, 184). Other element would receive the click: <div class=\"modal-body\">...</div>\n  (Session info: chrome=95.0.4638.54)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00713AB3+2505395]\n\tOrdinal0 [0x006AAE41+2076225]\n\tOrdinal0 [0x005B2498+1057944]\n\tOrdinal0 [0x005E2C09+1256457]\n\tOrdinal0 [0x005E0F48+1249096]\n\tOrdinal0 [0x005DED0D+1240333]\n\tOrdinal0 [0x005DDB68+1235816]\n\tOrdinal0 [0x005D3857+1194071]\n\tOrdinal0 [0x005F59F3+1333747]\n\tOrdinal0 [0x005D3676+1193590]\n\tOrdinal0 [0x005F5ADA+1333978]\n\tOrdinal0 [0x00605168+1397096]\n\tOrdinal0 [0x005F58BB+1333435]\n\tOrdinal0 [0x005D23E4+1188836]\n\tOrdinal0 [0x005D323F+1192511]\n\tGetHandleVerifier [0x0089CB36+1554566]\n\tGetHandleVerifier [0x00944A0C+2242396]\n\tGetHandleVerifier [0x007A0E0B+523099]\n\tGetHandleVerifier [0x0079FEB0+519168]\n\tOrdinal0 [0x006B02FD+2097917]\n\tOrdinal0 [0x006B4388+2114440]\n\tOrdinal0 [0x006B44C2+2114754]\n\tOrdinal0 [0x006BE041+2154561]\n\tBaseThreadInitThunk [0x77A5FA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77BA7A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77BA7A6E+238]",
  "statusTrace" : "self = <test_case.test_register_from.TestRegisterFrom object at 0x00000282DB24FF10>\n\n    def test_file_replace(self):\n        \"\"\"上传附件\"\"\"\n        file = SeatRegister(driver=None, cookies=self.cookie)\n>       file.test_file_replace()\n\ntest_register_from.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\po\\seat_register.py:77: in test_file_replace\n    self.findtext(By.XPATH, '//*[@id=\"attachmentModal\"]/div/div/div[3]/button[2]').click()\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:693: in _execute\n    return self._parent.execute(command, params)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000282DB24F430>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77BA7A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77BA7A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"btn btn-info\">...</button> is not clickable at point (920, 184). Other element would receive the click: <div class=\"modal-body\">...</div>\nE         (Session info: chrome=95.0.4638.54)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00713AB3+2505395]\nE       \tOrdinal0 [0x006AAE41+2076225]\nE       \tOrdinal0 [0x005B2498+1057944]\nE       \tOrdinal0 [0x005E2C09+1256457]\nE       \tOrdinal0 [0x005E0F48+1249096]\nE       \tOrdinal0 [0x005DED0D+1240333]\nE       \tOrdinal0 [0x005DDB68+1235816]\nE       \tOrdinal0 [0x005D3857+1194071]\nE       \tOrdinal0 [0x005F59F3+1333747]\nE       \tOrdinal0 [0x005D3676+1193590]\nE       \tOrdinal0 [0x005F5ADA+1333978]\nE       \tOrdinal0 [0x00605168+1397096]\nE       \tOrdinal0 [0x005F58BB+1333435]\nE       \tOrdinal0 [0x005D23E4+1188836]\nE       \tOrdinal0 [0x005D323F+1192511]\nE       \tGetHandleVerifier [0x0089CB36+1554566]\nE       \tGetHandleVerifier [0x00944A0C+2242396]\nE       \tGetHandleVerifier [0x007A0E0B+523099]\nE       \tGetHandleVerifier [0x0079FEB0+519168]\nE       \tOrdinal0 [0x006B02FD+2097917]\nE       \tOrdinal0 [0x006B4388+2114440]\nE       \tOrdinal0 [0x006B44C2+2114754]\nE       \tOrdinal0 [0x006BE041+2154561]\nE       \tBaseThreadInitThunk [0x77A5FA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77BA7A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77BA7A6E+238]\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: ElementClickInterceptedException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "test_register_from"
  }, {
    "name" : "subSuite",
    "value" : "TestRegisterFrom"
  }, {
    "name" : "host",
    "value" : "MS-AMWIIJEZADQO"
  }, {
    "name" : "thread",
    "value" : "8152-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_register_from"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "dd73204f8b311474.json",
  "parameterValues" : [ ]
}